{
  "name": "hello-netsjs",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@nestjs/common": "^10.3.0", <= 1. NestJS의 공통 코드들
    "@nestjs/core": "^10.3.0", <= 2. NestJS의 코드(가드, 미들웨어, 파이프 등)
    "@nestjs/platform-express": "^10.3.0", <= 3. HTTP 요청에 익스프레스 사용
    "reflect-metadata": "^0.1.14", <= 4. 데코레이터 사용 시 필수
    "typescript": "^5.3.3" <= 5. 타임스크립트 사용 시 필수
  }
}

1. @nestjs/common은 실제 프로젝트에서 사용할 대부분 코드가 들어 있습니다. 데코레이터로 사용하는 함수들의 클래스들이 대표적입니다.

2. @nestjs/core는 @netsjs/common에서 사용하는 코드가 들어 있습니다. 가드, 미들웨어, 파이프 등을 만드는 핵심 코드가 있습니다.

3. @nestjs/platform-express는 이전에 말씀드린 대로 HTTP 요청/응답 부분을 감싸서 익스프레스의 req, res 객체를 사용하는 라이브러리입니다.


NestJS 규칙
1. 파일명은 .으로 연결합니다. 모듈이 둘 이상의 단어로 구성되어 있으면 대시로 연결합니다.
ex : hello.controller.ts
2. 클래스명은 낙타 표기법을 사용합니다.
HelloController
3. 같은 디렉터리에 있는 클래스는 index.ts를 통해서 임포트하는 것을 권장합니다.
// index.ts를 사용하지 않는 경우
import { MyfirstController } from './controllers/my-first.controller'
// index.ts를 사용하는 경우
import { MyfirstController, MySecondController } './controller;
4. 마지막으로 타임스크립트에서는 인터페이스를 많이 사용합니다. 인터페이스는 타입을 정의하는 데 사용되고 구체적인 내용은 클래스를 만들고
인터페이스를 상속하는 방식으로 작성합니다. 인터페이스 작명법으로 앞에 I를 붙이는 방법이 있습니다. 예를 들어 Series라는 타입을 정의할때
Iseries처럼 작명하는겁니다. 이 방식은 보기에도 어색한 부분이 있습니다. 그래서 NestJS에서는 가능하면 Series 인터페이스를 만들고 그 하위 인터페이스 혹은 클래스를 만듭니다.
다음의 예제 코드를 참고합시다.
interface Series {}
interface BookSeries extends Series {}
class MovieSeries extends Series {}



